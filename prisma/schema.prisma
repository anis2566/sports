generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          String          @default("User")
  status        String          @default("Pending")

  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}

model Brand {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  nameBangla String?
  imageUrl  String?
  description String?

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  nameBangla String?
  imageUrl  String
  description String?
  isFeatured Boolean @default(false)
  genre       String?
  status      String @default("Active")
  tags        String[]

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Product {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  nameBangla String?
  description String
  totalStock       Int @default(0)
  rating        Float @default(0)
  totalReview   Int @default(0)
  totalSold     Int @default(0)
  tags        String[] @default([])
  status      String @default("Active")

  brandId     String @db.ObjectId
  brand       Brand @relation(fields: [brandId], references: [id], onDelete: Cascade)

  categoryId     String @db.ObjectId
  category       Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  variants Variant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([brandId])
  @@index([categoryId])
}


model Variant {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  stock     Int
  color     String?
  imageUrl  String[] @default([])
  price     Int
  discount    Int?
  discountPrice Int?

  productId String @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
