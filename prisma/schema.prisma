generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Month {
  January
  February
  March
  April
  May
  June
  July
  August
  September
  October
  November
  December
}
 
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          String          @default("User")
  status        String          @default("Pending")
  dob           DateTime?
  gender        String?
  phone         String?
  
  seller Seller?

  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  orders Order[]
  reviews Review[]
  questions Question[]
  answers Answer[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}

model Brand {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  nameBangla String?
  imageUrl  String?
  description String?

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  nameBangla String?
  imageUrl  String
  description String?
  isFeatured Boolean @default(false)
  genre       String?
  status      String @default("Active")
  tags        String[]

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Product {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  nameBangla String?
  shortDescription String?
  description String
  totalStock       Int @default(0)
  rating        Float @default(0)
  totalReview   Int @default(0)
  totalSold     Int @default(0)
  tags        String[] @default([])
  status      String @default("Active")
  price       Int @default(0)
  discount    Int @default(0)
  discountPrice Int @default(0)
  sellerPrice Int @default(0)

  brandId     String @db.ObjectId
  brand       Brand @relation(fields: [brandId], references: [id], onDelete: Cascade)

  categoryId     String @db.ObjectId
  category       Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  variants Variant[]
  orderItems OrderItem[]
  reviews Review[]
  questions Question[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([brandId])
  @@index([categoryId])
}


model Variant {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  stock     Int
  colors     String[] @default([])
  images  String[] @default([])
  price     Int
  discount    Int?
  discountPrice Int?
  sellerPrice Int

  productId String @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Banner {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId

  imageUrl String
  productId String? @db.ObjectId
  status      String @default("Active")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Order {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  phone     String
  altPhone  String?
  month     Month
  address   String

  totalPrice Float
  shippingCharge Float
  totalPaidAmount Float

  status String @default("Pending")
  paymentMethod String @default("COD")
  paymentStatus String @default("Pending")

  cityId String @db.ObjectId
  city   City @relation(fields: [cityId], references: [id], onDelete: Cascade)

  areaId String @db.ObjectId
  area   Area @relation(fields: [areaId], references: [id], onDelete: Cascade)

  zoneId String? @db.ObjectId
  zone   Zone? @relation(fields: [zoneId], references: [id], onDelete: Cascade)

  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int
  price     Float
  color     String?
  
  orderId   String   @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId    String   @db.ObjectId
  product      Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  variantId    String   @db.ObjectId
  variant      Variant     @relation(fields: [variantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}


model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  rating    Int      @default(0)

  productId  String   @db.ObjectId
  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([userId])
  @@index([rating])
}

model Question {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  question  String

  userId String   @db.ObjectId
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String   @db.ObjectId
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  answers Answer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Answer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  answer    String

  userId String   @db.ObjectId
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  questionId String   @db.ObjectId
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Seller {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  businessName String
  phone     String
  email     String
  address   String?
  documentUrl String
  imageUrl String
  status    String @default("Pending")

  userId String @db.ObjectId @unique
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model City {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  nameBangla String
  cityId    Int @unique

  areas Area[]
  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Area {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  nameBangla String
  areaId    Int @unique

  cityId String @db.ObjectId
  city   City @relation(fields: [cityId], references: [id], onDelete: Cascade)

  zones Zone[]
  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Zone {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  nameBangla String
  zoneId    Int @unique

  areaId String @db.ObjectId
  area   Area @relation(fields: [areaId], references: [id], onDelete: Cascade)

  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}